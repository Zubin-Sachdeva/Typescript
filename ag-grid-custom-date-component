import React, {
  forwardRef,
  useEffect,
  useImperativeHandle,
  useRef,
  useState,
} from 'react';

export default forwardRef((props, ref) => {
  const [date, setDate] = useState(null);
  const [picker, setPicker] = useState(null);
  const refFlatPickr = useRef(null);
  const refInput = useRef(null);

  //*********************************************************************************
  //          LINKING THE UI, THE STATE AND AG-GRID
  //*********************************************************************************

  const onDateChanged = (selectedDates) => {
    setDate(selectedDates[0]);
  };

  useEffect(() => {
    setPicker(
      flatpickr(refFlatPickr.current, {
        onChange: onDateChanged,
        dateFormat: 'd/m/Y',
        wrap: true,
      })
    );
  }, []);

  useEffect(() => {
    if (picker) {
      picker.calendarContainer.classList.add('ag-custom-component-popup');
    }
  }, [picker]);

  useEffect(() => {
    //Callback after the state is set. This is where we tell ag-grid that the date has changed so
    //it will proceed with the filtering and we can then expect ag-Grid to call us back to getDate
    if (picker) {
      picker.setDate(date);
      props.onDateChanged();
    }
  }, [date, picker]);

  useImperativeHandle(ref, () => {
    return {
      //*********************************************************************************
      //          METHODS REQUIRED BY AG-GRID
      //*********************************************************************************
      getDate() {
        //ag-grid will call us here when in need to check what the current date value is hold by this
        //component.
        return date;
      },

      setDate(date) {
        //ag-grid will call us here when it needs this component to update the date that it holds.
        setDate(date);
      },

      //*********************************************************************************
      //          AG-GRID OPTIONAL METHODS
      //*********************************************************************************

      setInputPlaceholder(placeholder) {
        if (refInput.current) {
          refInput.current.setAttribute('placeholder', placeholder);
        }
      },

      setInputAriaLabel(label) {
        if (refInput.current) {
          refInput.current.setAttribute('aria-label', label);
        }
      },
    };
  });

  //Inlining styles to make simpler the component
  return (
    <div
      className="ag-input-wrapper custom-date-filter"
      role="presentation"
      ref={refFlatPickr}
    >
      <input type="text" ref={refInput} data-input style={{ width: '100%' }} />
      <a class="input-button" title="clear" data-clear>
        <i class="fa fa-times"></i>
      </a>
    </div>
  );
});


+++++++++++++++++++++++++++++++ MATERIAL UI ++++++++++++++++++++++++++++++++++++

import React, {Component} from "react"

import KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';
import KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';
import KeyboardArrowUp from '@material-ui/icons/KeyboardArrowUp';

import MomentUtils from 'material-ui-pickers/utils/moment-utils';
import {MuiPickersUtilsProvider} from "material-ui-pickers"

export default class MaterialUIDateComponent extends Component {

   constructor(props) {
      super(props);
      this.state = {
         date: null,
      };
      this.dateInput = React.createRef();
      this.onDateChanged = this.onDateChanged.bind(this);
   }

   render() {
      return (
        <MuiPickersUtilsProvider utils={MomentUtils}>
          <InlineDatePicker
            ref={this.dateInput}
            keyboard
            label={label}
            format="MM/DD/YYYY"
            mask={value => (value ? [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/] : [])}
            value={this.state.date}
            onChange={this.onDateChanged}
            disableOpenOnEnter
            disabled={disabled || readOnly}
            animateYearScrolling={false}
            leftArrowIcon={<KeyboardArrowLeft />}
            rightArrowIcon={<KeyboardArrowRight />}
            keyboardIcon={<KeyboardArrowUp />}
          />
        </MuiPickersUtilsProvider>
      )
   }

   getDate() {
      return this.state.date;
   }

   setDate(date) {
      this.setState({
         date
      });
   }

   updateAndNotifyAgGrid(date) {
      this.setState({
            date: date
         },
         this.props.onDateChanged
      );
   }

   onDateChanged(date) {
      if (date !== this.state.date) {
         this.updateAndNotifyAgGrid(date.toDate());
      }
   }
}
